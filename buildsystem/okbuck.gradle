apply from: 'buildsystem/dependencies.gradle'
apply plugin: 'com.uber.okbuck'
okbuck {
    buildToolVersion = "$rootProject.ext.androidBuildToolsVersion"
    target = "android-$rootProject.ext.androidTargetSdkVersion"
    linearAllocHardLimit = [
            app: 16 * 1024 * 1024
    ]
    wrapper {
        repo = 'https://github.com/OkBuilds/buck.git'
        remove = ['.buckconfig.local', "**/BUCK"]
        watch += ["**/*.sq"]
    }
    intellij {
        sources = true
    }
}

Task okbuckTask = project.tasks.getByName("okbuck")

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin('java')) {
            addCommonConfigurationForJavaModules(project)
        } else if (project.plugins.hasPlugin('com.android.application')
                || project.plugins.hasPlugin('com.android.library')) {
            addCommonConfigurationForAndroidModules(project, okbuckTask)
        }

        project.tasks.withType(Test) { Test task ->
            task.jvmArgs << "-Djava.awt.headless=true"
        }
    }
}

static def addCommonConfigurationForJavaModules(Project project) {
    if (project.plugins.hasPlugin('me.tatarka.retrolambda')) {
        project.sourceCompatibility = JavaVersion.VERSION_1_8
        project.targetCompatibility = JavaVersion.VERSION_1_8
    } else {
        project.sourceCompatibility = JavaVersion.VERSION_1_7
        project.targetCompatibility = JavaVersion.VERSION_1_7
    }
}

static def addCommonConfigurationForAndroidModules(Project project, Task okbuckTask) {
    project.android {
        compileOptions {
            if (project.plugins.hasPlugin('me.tatarka.retrolambda')) {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            } else {
                sourceCompatibility JavaVersion.VERSION_1_7
                targetCompatibility JavaVersion.VERSION_1_7
            }
        }
    }

    def variants
    if (project.plugins.hasPlugin('com.android.application')) {
        variants = project.android.applicationVariants
    } else {
        variants = project.android.libraryVariants
    }

    if (project.plugins.hasPlugin('com.squareup.sqldelight')) {
        variants.all {
            Task sqlDelightTask = project.tasks.getByName("generate${it.name.capitalize()}SqlDelightInterface")
            okbuckTask.dependsOn(sqlDelightTask)
            project.android.sourceSets."${it.name}".java.srcDirs += [sqlDelightTask.outputs.files[0] as String]
        }
    }
}
